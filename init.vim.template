" 
"                               _                    
"  _ __ ___  _   _   _ ____   _(_)_ __ ___  _ __ ___ 
" | '_ ` _ \| | | | | '_ \ \ / / | '_ ` _ \| '__/ __|
" | | | | | | |_| | | | | \ V /| | | | | | | | | (__ 
" |_| |_| |_|\__, | |_| |_|\_/ |_|_| |_| |_|_|  \___|
"            |___/                                   

" Author: @NiiiKlaus


" === TODO ===
" - sort out minimal/maximal init.vim
" - os specified settings


" === Table of Contents ===
"
" # Editor Setup
" ## System
" ## Check Health
" ## Editor Behaviours
" ## Mappings
" ### Basic Mappings
" ### Cursor Movement
" #### Normal Mode
" #### Insert Mode
" ### Window Management
" ### Tab Management
" ### Other Useful Stuff
"
" # Terminal Setup
"
" # Install Plugins with Vim-Plug
" ## Written by @theniceboy
" ## Dress up & Visual Enhancement
" ## File Navigation
" ## Editor Enhancement
" ## For General Writing
" ## Programming Languages Support
" ### General
" ### Language Specifid
" ### Others
" ## Vim Applications
" ## Other Useful Utilities
" ## Dependencies
" ## Experimental
"
" # Experimental Settings
"
" # Vim Plug Settings
"   - eleline.vim
"   - GitGutter
"   - coc.nvim
"   - MarkdownPreview
"   - vim-table-mode
"   - FZF
"   - CTRLP (dependency for ominisharp)
"   - vim-bookmarks
"   - UndoTree
"   - vim-visual-multi
"   - Far.vim
"   - auto-pairs
"   - Bullets.vim
"   - Vista.vim
"   - Ultisnips
"   - vimtex
"   - vim-go
"   - AutoFormat
"   - OmniSharp
"   - Colorizer
"   - vim-easymotion
"   - goyo
"   - jsx
"   - fastfold
"   - vim-easy-align
"   - vim-after-object
"   - rainbow
"   - xtabline
"   - suda.vim
"   - vimspector
"   - vim-markdown-toc
"   - rnvimr
"   - vim-illuminate
"   - NERDTree
"   - NERDTree-git-plugin
"   - vim-peekaboo
"
" # Necessary Commands to Execute
"



" ======================
" === # Editor Setup ===
" ======================

" =================
" === ## System ===
" =================

let &t_ut=''
set autochdir


" =======================
" === ## Check Health ===
" =======================

" Python
let g:python3_host_prog = '/usr/local/anaconda3/bin/python'
let g:python_host_prog = '/usr/bin/python2'


" ============================
" === ## Editor Behaviours ===
" ============================

"set number
"set relativenumber
"set cursorline
"set noexpandtab
"set tabstop=4
"set shiftwidth=4
"set softtabstop=4
"set autoindent
"set list
"set listchars=tab:\|\ ,trail:▫
"set scrolloff=4
"set ttimeoutlen=0
set notimeout
"set viewoptions=cursor,folds,slash,unix
set wrap
"set tw=0
"set indentexpr=
"set foldmethod=indent
"set foldlevel=99
"set foldenable
"set formatoptions-=tc
"set splitright
"set splitbelow
"set noshowmode
"set showcmd
"set wildmenu
"set ignorecase
"set smartcase
"set shortmess+=c
"set inccommand=split
"set completeopt=longest,noinsert,menuone,noselect,preview
"set lazyredraw
"set visualbell
set colorcolumn=80
"set updatetime=1000
"set virtualedit=block
"set clipboard=unnamedplus
" jump to the place edited lately
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" ===================
" === ## Mappings ===
" ===================

" ========================== 
" === ### Basic Mappings ===
" ==========================

let g:mapleader=" "
" disable the default s key
noremap s <nop>

" map <LEADER>*n for <nop> in case the cursor freezes
noremap <LEADER><LEADER> <nop>
noremap <LEADER><LEADER><LEADER> <nop>
noremap <LEADER><LEADER><LEADER><LEADER> <nop>
noremap <LEADER><LEADER><LEADER><LEADER><LEADER> <nop>

" save and quit
noremap Q     :q<CR>
noremap <C-q> :q!<CR>
noremap S     :w<CR>

" adjust and source the nvimrc file anytime
" noremap <LEADER>rc    :e /home/niklaus/.config/nvim/init.vim<CR>
" noremap <LEADER>src   :source /home/niklaus/.config/nvim/init.vim<CR>
noremap <LEADER>rc    :e $MYVIMRC<CR>
noremap <LEADER>src   :source $MYVIMRC<CR>

" Y in normal mode to copy till the end of the line
noremap Y y$

" indentation
nnoremap < <<
nnoremap > >>

" disable hlsearch
noremap <LEADER><CR> :nohlsearch<CR>

" folding
noremap <silent> <LEADER>o za

" ===========================
" === ### Cursor Movement ===
" ===========================

" ========================
" === #### Normal Mode ===
" ========================

" faster horizontal navigation
noremap <silent> L 5l
noremap <silent> H 5h

" faster vertical navigation
noremap <silent> K 5k
noremap <silent> J 5j

" start and end jumps
noremap <silent> <C-h> 0
noremap <silent> <C-l> $

" word jump
noremap <silent> W 5w
noremap <silent> B 5b

" move up and down the view point
noremap <C-k> 5<C-y>
noremap <C-j> 5<C-e>

" ========================
" === #### Insert Mode ===
" ========================

inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-k> <Up>
inoremap <C-j> <Down>

" =============================
" === ### Window Management ===
" =============================

" use <LEADER> + arrow keys to move the cursor from window to window
noremap <LEADER>h <C-w>h
noremap <LEADER>l <C-w>l
noremap <LEADER>j <C-w>j
noremap <LEADER>k <C-w>k

" split screens
noremap sl :set splitright<CR>:vsplit<CR>
noremap sh :set nosplitright<CR>:vsplit<CR>
noremap sj :set splitbelow<CR>:split<CR>
noremap sk :set nosplitbelow<CR>:split<CR>

" resize splits with arrow keys
noremap <up>    :res -5<CR>
noremap <down>  :res +5<CR>
noremap <left>  :vertical resize -5<CR>
noremap <right> :vertical resize +5<CR>

" ==========================
" === ### Tab Management ===
" ==========================

" create a new tab
noremap te :tabe<CR>

" move around tabs
noremap th :-tabnext<CR>
noremap tl :+tabnext<CR>

" move the tabs
noremap tmh :-tabmove<CR>
noremap tmi :+tabmove<CR>

" use tab in insert mode to auto complete code
function! CleverTab()
        if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
                return "\<Tab>"
        else
                return "\<C-N>"
        endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>


" ==============================
" === ### Other Useful Stuff ===
" ==============================

" spell check
noremap <LEADER>sc :set spell!<CR>

" compile functions
noremap fj :call CompileRunGcc()<CR>

func! CompileRunGcc()
	exec "w"
	if &filetype == 'c'
		"exec "!g++ % -o %<"
		"exec "!./%<"
		"exec "!time ./%<"
		exec "!g++ % -o %<"
		set splitbelow
		:sp
		:term ./%<
	elseif &filetype == 'cpp'
		set splitbelow
		exec "!g++ -std=c++11 % -Wall -o %<"
		:sp
		:res -15
		:term ./%<
	elseif &filetype == 'java'
		exec "!javac %"
		exec "!time java %<"
	elseif &filetype == 'sh'
		":!time bash %
		:sp
		:term source %
	elseif &filetype == 'python'
		set splitbelow
		:sp
		:term python %
	elseif &filetype == 'html'
		silent! exec "!".g:mkdp_browser." % &"
	elseif &filetype == 'markdown'
		exec "MarkdownPreview"
	elseif &filetype == 'tex'
		silent! exec "VimtexStop"
		silent! exec "VimtexCompile"
	elseif &filetype == 'dart'
		CocCommand flutter.run
	elseif &filetype == 'go'
		set splitbelow
		:sp
		:term go run %
	endif
endfunc



" ========================================



" ========================
" === # Terminal Setup ===
" ========================

let g:neoterm_autoscroll = 1
"autocmd TermOpen term://* startinsert
tnoremap <C-N> <C-\><C-N>
tnoremap <C-O> <C-\><C-N><C-O>
let g:terminal_color_0  = '#000000'
let g:terminal_color_1  = '#FF5555'
let g:terminal_color_2  = '#50FA7B'
let g:terminal_color_3  = '#F1FA8C'
let g:terminal_color_4  = '#BD93F9'
let g:terminal_color_5  = '#FF79C6'
let g:terminal_color_6  = '#8BE9FD'
let g:terminal_color_7  = '#BFBFBF'
let g:terminal_color_8  = '#4D4D4D'
let g:terminal_color_9  = '#FF6E67'
let g:terminal_color_10 = '#5AF78E'
let g:terminal_color_11 = '#F4F99D'
let g:terminal_color_12 = '#CAA9FA'
let g:terminal_color_13 = '#FF92D0'
let g:terminal_color_14 = '#9AEDFE'

augroup TermHandling
	autocmd!
  	" Turn off line numbers, listchars, auto enter insert mode and map esc to
  	" exit insert mode
  	autocmd TermOpen * setlocal listchars= nonumber norelativenumber
		\ | startinsert
  	autocmd FileType fzf call LayoutTerm(0.6, 'horizontal')
augroup END

function! LayoutTerm(size, orientation) abort
	let timeout = 16.0
  	let animation_total = 120.0
  	let timer = {
		\ 'size': a:size,
  	  	\ 'step': 1,
  	  	\ 'steps': animation_total / timeout
  	\}

  	if a:orientation == 'horizontal'
  	  resize 1
  	  function! timer.f(timer)
  	    execute 'resize ' . string(&lines * self.size * (self.step / self.steps))
  	    let self.step += 1
  	  endfunction
  	else
  	  vertical resize 1
  	  function! timer.f(timer)
  	    execute 'vertical resize ' . string(&columns * self.size * (self.step / self.steps))
  	    let self.step += 1
  	  endfunction
  	endif
  	call timer_start(float2nr(timeout), timer.f, {'repeat': float2nr(timer.steps)})
endfunction

" Open autoclosing terminal, with optional size and orientation
function! OpenTerm(cmd, ...) abort
	let orientation = get(a:, 2, 'horizontal')
  	if orientation == 'horizontal'
		new | wincmd J
  	else
		vnew | wincmd L
  	endif
  	call LayoutTerm(get(a:, 1, 0.5), orientation)
  	call termopen(a:cmd, {'on_exit': {j,c,e -> execute('if c == 0 | close | endif')}})
endfunction



" ========================================



" =======================================
" === # Install Plugins with Vim-Plug ===
" =======================================

call plug#begin('~/.config/nvim/plugged')

" =================================
" === ## Written by @theniceboy ===
" =================================

" elegant statusline
Plug 'theniceboy/eleline.vim'
" git
Plug 'theniceboy/vim-gitignore', { 'for': ['gitignore', 'vim-plug'] }
" Markdown
Plug 'theniceboy/bullets.vim'


" ========================================
" === ## Dress up & Visual Enhancement ===
" ========================================

"" word highlighting
"Plug 'RRethy/vim-illuminate'
"" track buffers
"Plug 'bling/vim-bufferline'
"" color scheme
"Plug 'ajmwagar/vim-deus'
"" variable highlighting
"Plug 'jaxbot/semantic-highlight.vim'
"" use colors in terminal
"Plug 'chrisbra/Colorizer'
"" prettify vim with little unicode icons, support several plugins
"Plug 'ryanoasis/vim-devicons'
"" syntax highlighting in different colors
"Plug 'luochen1990/rainbow'
"" colorized tabs
"Plug 'mg979/vim-xtabline'
" 'a terminal for more modern age' as they say
Plug 'wincent/terminus'


" ==========================
" === ## File Navigation ===
" ==========================

"fzf vim support
"Plug 'junegunn/fzf.vim'
"ranger vim support
"Plug 'kevinhwang91/rnvimr', {'do': 'make sync'}
"" nerdtree
"Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
"Plug 'Xuyuanp/nerdtree-git-plugin'


" =============================
" === ## Editor Enhancement ===
" =============================

"" auto pairs (), {}, etc.
"Plug 'jiangmiao/auto-pairs'
" in analogy with visual-block mode
Plug 'mg979/vim-visual-multi'
"" use <space>cn to comment a line
"Plug 'scrooloose/nerdcommenter'
" use gs to switch
Plug 'AndrewRadev/switch.vim'
"" wrap or change characters used to wrap the word more easily
"Plug 'tpope/vim-surround'
" in visual mode, type i' to select all text in '', or type i) i] i}
Plug 'gcmt/wildfire.vim'
" use da= to delete what's after = , same for ca= etc.
Plug 'junegunn/vim-after-object'
"" align the = in paragraph using gaip=
"Plug 'junegunn/vim-easy-align'
" use Ctrl+L (insert) to toggle capslock
Plug 'tpope/vim-capslock'
"" jump between selected words
"Plug 'easymotion/vim-easymotion'
"" automatic fold
"Plug 'Konfekt/FastFold'
"" extend " and @ in normal mode
"Plug 'junegunn/vim-peekaboo'
" faster substitution
Plug 'svermeulen/vim-subversive'
" automatic close quotes etc.
Plug 'Raimondi/delimitMate'
" find & replace words or phrases without switching file
Plug 'brooth/far.vim', { 'on': ['F', 'Far', 'Fardo'] }
" search status
Plug 'osyo-manga/vim-anzu'
" auto format
Plug 'Chiel92/vim-autoformat'
" taglist 
Plug 'liuchengxu/vista.vim'
" undo tree
Plug 'mbbill/undotree'


" ========================================
" === ## Programming Languages Support ===
" ========================================

" ===================
" === ### General ===
" ===================

" debugger
Plug 'puremourning/vimspector', {'do': './install_gadget.py --enable-c --enable-python'}

" auto complete
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" ==============================
" === ### Language Specified ===
" ==============================

" Dart
Plug 'tiagofumo/dart-vim-flutter-layout'

" C#
Plug 'OmniSharp/omnisharp-vim'
" omnisharp-vim dependency
Plug 'ctrlpvim/ctrlp.vim' , { 'for': ['cs', 'vim-plug'] } 

" HTML, CSS, JavaScript, PHP, JSON, etc.
Plug 'elzr/vim-json'
Plug 'hail2u/vim-css3-syntax', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }
Plug 'pangloss/vim-javascript', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
Plug 'yuezk/vim-js', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
Plug 'MaxMEllon/vim-jsx-pretty', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
Plug 'jelera/vim-javascript-syntax', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }

" Go
Plug 'fatih/vim-go' , { 'for': ['go', 'vim-plug'], 'tag': '*' }

" Python
" python code folding
Plug 'tmhedberg/SimpylFold', { 'for' :['python', 'vim-plug'] }
" pep8 indentation
Plug 'Vimjas/vim-python-pep8-indent', { 'for' :['python', 'vim-plug'] }
" semantic highlighting for python
Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins', 'for' :['python', 'vim-plug'] }
" code snippets folding
Plug 'tweekmonster/braceless.vim'

" Flutter
Plug 'dart-lang/dart-vim-plugin'
Plug 'thosakwe/vim-flutter'

" Swift
Plug 'keith/swift.vim'

" Markdown
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install_sync() }, 'for' :['markdown', 'vim-plug'] }
" create a table using markdown more easily
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
Plug 'mzlogin/vim-markdown-toc', { 'for': ['gitignore', 'markdown'] }

" Tex
Plug 'lervag/vimtex'

" ==================
" === ### Others ===
" ==================

" emac's org mode integrated for vim
Plug 'jceb/vim-orgmode', {'for': ['vim-plug', 'org']}

" git
Plug 'fszymanski/fzf-gitignore', { 'do': ':UpdateRemotePlugins' }
Plug 'airblade/vim-gitgutter'


" ==============================
" === ## For General Writing ===
" ==============================

" write in zen mode with no distraction
Plug 'junegunn/goyo.vim'
" use bookmarks in vim
Plug 'MattesGroeger/vim-bookmarks'


" ===========================
" === ## Vim Applications ===
" ===========================

Plug 'itchyny/calendar.vim'


" =================================
" === ## Other Useful Utilities ===
" =================================

" read or write file with sudo command
Plug 'lambdalisue/suda.vim'
" help vim read pdf files as text files
Plug 'makerj/vim-pdf'


" =======================
" === ## Dependencies ===
" =======================

" interpret a file by function and cache file automatically
Plug 'MarcWeber/vim-addon-mw-utils'
" define my own text object
Plug 'kana/vim-textobj-user'
" remote plugin framework
Plug 'roxma/nvim-yarp'


" =======================
" === ## Experimental ===
" =======================

call plug#end()



" ========================================



" ===============================
" === # Experimental Settings ===
" ===============================

set lazyredraw
" enable true colors support
set termguicolors
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set background=dark
color deus
hi NonText ctermfg=gray guifg=grey10



" ========================================



" =============================
" === # Vim Plugin Settings ===
" =============================

" eleline.vim

let g:airline_powerline_fonts = 0


" GitGutter

let g:gitgutter_signs = 0
let g:gitgutter_map_keys = 0
let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_preview_win_floating = 1

autocmd BufWritePost * GitGutter

nnoremap <LEADER>gf :GitGutterFold<CR>
nnoremap P :GitGutterPreviewHunk<CR>
nnoremap <LEADER>gN :GitGutterPrevHunk<CR>
nnoremap <LEADER>gn :GitGutterNextHunk<CR>


" coc.nvim

let g:coc_global_extensions = ['coc-python', 'coc-vimlsp', 'coc-html', 'coc-json', 'coc-css', 'coc-tsserver', 'coc-yank', 'coc-lists', 'coc-gitignore', 'coc-vimlsp', 'coc-tailwindcss', 'coc-stylelint', 'coc-tslint', 'coc-lists', 'coc-git', 'coc-explorer', 'coc-pyright', 'coc-sourcekit', 'coc-translator', 'coc-flutter']

" use <Tab> to trigger completion
function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]	=~ '\s'
endfunction
inoremap <silent><expr> <Tab>
			\ pumvisible() ? "\<C-n>" :
			\ <SID>check_back_space() ? "\<Tab>" :
			\ coc#refresh()
" use <S-Tab> to confirm completion
inoremap <expr> <S-Tab> pumvisible() ? "\<C-y>" : "\<CR>"
" use <C-Space> to trigger completion forcefully
inoremap <silent><expr> <C-Space> coc#refresh()

" open up coc-commands
nnoremap <C-c> :CocCommand<CR>
" text objects
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)
" useful commands
nnoremap <silent> <space>y :<C-u>CocList -A --normal yank<cr>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader> rn <Plug>(coc-rename)
"nmap          ttt      :CocCommand explorer<CR>
" coc-translator
nmap tp <Plug>(coc-translator-p)
" remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)


" MarkdownPreview

let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 1
let g:mkdp_refresh_slow = 0
let g:mkdp_command_for_global = 0
let g:mkdp_open_to_the_world = 1
let g:mkdp_open_ip = ''
let g:mkdp_echo_preview_url = 1
let g:mkdp_browserfunc = ''
let g:mkdp_browser = 'chromium'
let g:mkdp_preview_options = {
			\ 'mkit': {},
			\ 'katex': {},
			\ 'uml': {},
			\ 'maid': {},
			\ 'disable_sync_scroll': 0,
			\ 'sync_scroll_type': 'middle',
			\ 'hide_yaml_meta': 1
			\ }
let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''
let g:mkdp_port = 12345
let g:mkdp_page_title = '「${name}」'


" vim-table-mode

noremap <LEADER>tm :TableModeToggle<CR>
let g:table_mode_cell_text_object_i_map = 'k<Bar>'


" FZF

"set rtp+=/usr/local/opt/fzf
"set rtp+=/home/linuxbrew/.linuxbrew/opt/fzf
"noremap <C-p> :FZF<CR>
"noremap <C-f> :Ag<CR>
"noremap <C-h> :MRU<CR>
"noremap <C-t> :BTags<CR>
"noremap <C-l> :LinesWithPreview<CR>
"noremap <C-w> :Buffers<CR>
"noremap ; :History:<CR>

"autocmd! FileType fzf
"autocmd  FileType fzf set laststatus=0 noruler
"  \| autocmd BufLeave <buffer> set laststatus=2 ruler
"
"command! -bang -nargs=* Buffers
"  \ call fzf#vim#buffers(
"  \   '',
"  \   <bang>0 ? fzf#vim#with_preview('up:60%')
"  \           : fzf#vim#with_preview('right:0%', '?'),
"  \   <bang>0)
"
"
"command! -bang -nargs=* LinesWithPreview
"    \ call fzf#vim#grep(
"    \   'rg --with-filename --column --line-number --no-heading --color=always --smart-case . '.fnameescape(expand('%')), 1,
"    \   fzf#vim#with_preview({}, 'up:50%', '?'),
"    \   1)
"
"command! -bang -nargs=* Ag
"  \ call fzf#vim#ag(
"  \   '',
"  \   <bang>0 ? fzf#vim#with_preview('up:60%')
"  \           : fzf#vim#with_preview('right:50%', '?'),
"  \   <bang>0)
"
"
"command! -bang -nargs=* MRU call fzf#vim#history(fzf#vim#with_preview())
"
"command! -bang BTags
"  \ call fzf#vim#buffer_tags('', {
"  \     'down': '40%',
"  \     'options': '--with-nth 1 
"  \                 --reverse 
"  \                 --prompt "> " 
"  \                 --preview-window="70%" 
"  \                 --preview "
"  \                     tail -n +\$(echo {3} | tr -d \";\\\"\") {2} |
"  \                     head -n 16"'
"  \ })

"" fzf-preview.vim

"noremap <C-w> :BuffersPreview<CR>
"let g:fzf_preview_default_key_bindings = 'ctrl-e:down,ctrl-u:up'
"let g:fzf_preview_layout = 'belowright split new'
"let g:fzf_preview_rate = 0.4
"let g:fzf_full_preview_toggle_key = '<C-f>'
"let g:fzf_preview_command = 'ccat --color=always {-1}'
"let g:fzf_binary_preview_command = 'echo "It is a binary file"'

"" fzf-gitignore

" noremap <LEADER>gi :FzfGitignore<CR>


" CTRLP (dependency for ominisharp)

let g:ctrlp_map = ''
let g:ctrlp_cmd = 'CtrlP'


" vim-bookmarks

let g:bookmark_no_default_key_mappings = 1
nmap mt <Plug>BookmarkToggle
nmap ma <Plug>BookmarkAnnotate
nmap ml <Plug>BookmarkShowAll
nmap mn <Plug>BookmarkNext
nmap mN <Plug>BookmarkPrev
nmap mc <Plug>BookmarkClear
nmap mC <Plug>BookmarkClearAll
nmap mk <Plug>BookmarkMoveUp
nmap mj <Plug>BookmarkMoveDown
nmap <Leader>g <Plug>BookmarkMoveToLine
let g:bookmark_save_per_working_dir = 1
let g:bookmark_auto_save = 1
let g:bookmark_highlight_lines = 1
let g:bookmark_manage_per_buffer = 1
let g:bookmark_save_per_working_dir = 1
let g:bookmark_center = 1
let g:bookmark_auto_close = 1
let g:bookmark_location_list = 1


" Undotree

"noremap ut :UndotreeToggle<CR>
let g:undotree_DiffAutoOpen = 1
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_ShortIndicators = 1
let g:undotree_WindowLayout = 2
let g:undotree_DiffpanelHeight = 8
let g:undotree_SplitWidth = 24
function g:Undotree_CustomMap()
	nmap <buffer> j <plug>UndotreeNextState
	nmap <buffer> k <plug>UndotreePreviousState
	nmap <buffer> J 5<plug>UndotreeNextState
	nmap <buffer> k 5<plug>UndotreePreviousState
endfunc


" vim-visual-multi

let g:VM_leader = {'default': ',', 'visual': ',', 'buffer': ','}
let g:VM_maps = {}
" let g:VM_custom_motions  = {'n': 'h', 'i': 'l', 'u': 'k', 'e': 'j', 'N': '0', 'I': '$', 'h': 'e'}
let g:VM_maps['Find Under']         = '<C-j>'
let g:VM_maps['Find Subword Under'] = '<C-j>'
let g:VM_maps['Find Next']         = ''
let g:VM_maps['Find Prev']         = ''
let g:VM_maps['Remove Region'] = 'q'
let g:VM_maps['Skip Region'] = ''
let g:VM_maps["Undo"]      = 'u'
let g:VM_maps["Redo"]      = '<C-r>'


" Far.vim

noremap <LEADER>f :F  **/*<left><left><left><left><left>


" auto-pairs

let g:AutoPairsMapCh = 0


" Bullets.vim

let g:bullets_enabled_file_types = [
			\ 'markdown',
			\ 'text',
			\ 'gitcommit',
			\ 'scratch'
			\ ]


" Vista.vim

noremap <silent> T :Vista!!<CR>
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_default_executive = 'ctags'
let g:vista_fzf_preview = ['right:50%']
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }
function! NearestMethodOrFunction() abort
	return get(b:, 'vista_nearest_method_or_function', '')
endfunction
set statusline+=%{NearestMethodOrFunction()}
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()


" Ultisnips

let g:tex_flavor = "latex"
inoremap <C-n> <nop>
let g:UltiSnipsExpandTrigger="<C-e>"
let g:UltiSnipsJumpForwardTrigger="<C-e>"
let g:UltiSnipsJumpBackwardTrigger="<C-n>"
let g:UltiSnipsSnippetDirectories = [$HOME.'/.config/nvim/Ultisnips/', 'UltiSnips']
silent! au BufEnter,BufRead,BufNewFile * silent! unmap <C-r>


" vimtex

let g:vimtex_view_general_viewer = 'llpp'
let g:vimtex_mappings_enabled = 0
let g:vimtex_text_obj_enabled = 0
let g:vimtex_motion_enabled = 0
let maplocalleader=' '


" vim-go

let g:go_def_mapping_enabled = 0
let g:go_template_autocreate = 0
let g:go_textobj_enabled = 0
let g:go_auto_type_info = 1
let g:go_def_mapping_enabled = 0
let g:go_highlight_array_whitespace_error = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_functions = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_string_spellcheck = 1
let g:go_highlight_structs = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_types = 1
let g:go_highlight_variable_assignments = 0
let g:go_highlight_variable_declarations = 0


" AutoFormat

nnoremap \f :Autoformat<CR>


" OmniSharp

let g:OmniSharp_typeLookupInPreview = 1
let g:omnicomplete_fetch_full_documentation = 1

let g:OmniSharp_server_use_mono = 1
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_highlight_types = 2
let g:OmniSharp_selector_ui = 'ctrlp'

autocmd Filetype cs nnoremap <buffer> gd :OmniSharpPreviewDefinition<CR>
autocmd Filetype cs nnoremap <buffer> gr :OmniSharpFindUsages<CR>
autocmd Filetype cs nnoremap <buffer> gy :OmniSharpTypeLookup<CR>
autocmd Filetype cs nnoremap <buffer> ga :OmniSharpGetCodeActions<CR>
autocmd Filetype cs nnoremap <buffer> <LEADER>rn :OmniSharpRename<CR><C-N>:res +5<CR>

sign define OmniSharpCodeActions text=💡

augroup OSCountCodeActions
	autocmd!
	autocmd FileType cs set signcolumn=yes
	autocmd CursorHold *.cs call OSCountCodeActions()
augroup END

function! OSCountCodeActions() abort
	if bufname('%') ==# '' || OmniSharp#FugitiveCheck() | return | endif
	if !OmniSharp#IsServerRunning() | return | endif
	let opts = {
				\ 'CallbackCount': function('s:CBReturnCount'),
				\ 'CallbackCleanup': {-> execute('sign unplace 99')}
				\}
	call OmniSharp#CountCodeActions(opts)
endfunction

function! s:CBReturnCount(count) abort
	if a:count
		let l = getpos('.')[1]
		let f = expand('%:p')
		execute ':sign place 99 line='.l.' name=OmniSharpCodeActions file='.f
	endif
endfunction


" Colorizer

let g:colorizer_syntax = 1


" vim-easymotion

let g:EasyMotion_do_mapping = 0
let g:EasyMotion_do_shade = 0
let g:EasyMotion_smartcase = 1
map ' <Plug>(easymotion-bd-f)
nmap ' <Plug>(easymotion-bd-f)


" goyo

map <LEADER>gy :Goyo<CR>


" jsx

let g:vim_jsx_pretty_colorful_config = 1


" fastfold

nmap ffu <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'ze', 'zu']
let g:markdown_folding = 1
let g:tex_fold_enabled = 1
let g:vimsyn_folding = 'af'
let g:xml_syntax_folding = 1
let g:javaScript_fold = 1
let g:sh_fold_enabled= 7
let g:ruby_fold = 1
let g:perl_fold = 1
let g:perl_fold_blocks = 1
let g:r_syntax_folding = 1
let g:rust_fold = 1
let g:php_folding = 1


" vim-easy-align

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)


" vim-after-object

autocmd VimEnter * call after_object#enable('=', ':', '-', '#', ' ')


" rainbow

let g:rainbow_active = 1


" xtabline

let g:xtabline_settings = {}
let g:xtabline_settings.enable_mappings = 0
let g:xtabline_settings.tabline_modes = ['tabs', 'buffers']
let g:xtabline_settings.enable_persistance = 0
let g:xtabline_settings.last_open_first = 1
noremap xcm :XTabCycleMode<CR>
noremap xti :XTabInfo<CR>


" suda.vim

cnoreabbrev sudowrite w suda://%
cnoreabbrev sw w suda://%


" vimspector

let g:vimspector_enable_mappings = 'HUMAN'
"function! s:read_template_into_buffer(template)
" has to be a function to avoid the extra space fzf#run insers otherwise
"execute '0r ~/.config/nvim/sample_vimspector_json/'.a:template
"endfunction
"command! -bang -nargs=* LoadVimSpectorJsonTemplate call fzf#run({
		"\   'source': 'ls -1 ~/.config/nvim/sample_vimspector_json',
		"\   'down': 20,
		"\   'sink': function('<sid>read_template_into_buffer')
		"\ })
"noremap <LEADER>vs :tabe .vimspector.json<CR>:LoadVimSpectorJsonTemplate<CR>
sign define vimspectorBP         text=☛  texthl=Normal
sign define vimspectorBPDisabled text=☞  texthl=Normal
sign define vimspectorPC         text=🔶 texthl=SpellBad


" vim-markdown-toc

let g:vmt_cycle_list_item_markers = 1
let g:vmt_fence_text = 'TOC'
let g:vmt_fence_closing_text = '/TOC'


" rnvimr

let g:rnvimr_ex_enable = 1
let g:rnvimr_pick_enable = 1
nnoremap <silent> R :RnvimrSync<CR>:RnvimrToggle<CR><C-\><C-n>:RnvimrResize 0<CR>
let g:rnvimr_presets = [{'width': 1.0, 'height': 1.0}]


" vim-illuminate

let g:Illuminate_delay = 750
hi illuminatedWord cterm=undercurl gui=undercurl


" NERDTree

map tt :NERDTreeToggle<CR>
let NERDTreeMapOpenExpl = ""
let NERDTreeMapUpdir = ""
let NERDTreeMapUpdirKeepOpen = "l"
let NERDTreeMapOpenSplit = ""
let NERDTreeOpenVSplit = ""
let NERDTreeMapActivateNode = "i"
let NERDTreeMapOpenInTab = "o"
let NERDTreeMapPreview = ""
let NERDTreeMapCloseDir = "n"
let NERDTreeMapChangeRoot = "y"


" NERDTree-git-plugin

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }


" vim-peekaboo

noremap rr @2



" ========================================



" =======================================
" === # Necessary Commands to Execute ===
" =======================================

exec "nohlsearch"
